"""
   Name: ${FILE_NAME}
   Purpose:
   Created on: 9/24/2024
   Created by: Heng Sun
   Additional Notes: 
"""
from unittest import TestCase
import numpy as np
from sim import acquisition as acq


class TestAcquisition(TestCase):
    def test_get_phi_get_eta(self):
        """
        Test the get_phi and get_eta functions in acquisition.py
        This test is generated by Clarity and tested & modified by the author.
        """
        # 1D case
        u_1d = np.array([1, 0, 0])
        v_1d = np.array([0, 1, 0])
        c_1d = np.array([1, 1, 1])

        eta_1d = acq.get_eta(u_1d, v_1d, c_1d)
        phi_1d = acq.get_phi(u_1d, v_1d, c_1d)

        # Expected values for 1D case
        expected_eta_1d = np.sqrt((u_1d @ c_1d) ** 2 * (v_1d @ c_1d) ** 2)
        expected_phi_1d = np.arctan2(u_1d @ c_1d, v_1d @ c_1d)

        assert np.isclose(eta_1d,
                          expected_eta_1d), f"1D eta test failed: {eta_1d} != {expected_eta_1d}"
        assert np.isclose(phi_1d,
                          expected_phi_1d), f"1D phi test failed: {phi_1d} != {expected_phi_1d}"

        # 2D case
        u_2d = np.array([[1, 0], [0, 1], [0, 0]])
        v_2d = np.array([[0, 1], [1, 0], [0, 0]])
        c_2d = np.array([[1, 2], [1, 2], [1, 2]])

        eta_2d = acq.get_eta(u_2d, v_2d, c_2d)
        phi_2d = acq.get_phi(u_2d, v_2d, c_2d)

        # Expected values for 2D case
        expected_eta_2d = np.sqrt(
            np.einsum('ij,ij->j', u_2d, c_2d) ** 2 * np.einsum('ij,ij->j', v_2d, c_2d) ** 2)
        expected_phi_2d = np.arctan2(np.einsum('ij,ij->j', u_2d, c_2d),
                                     np.einsum('ij,ij->j', v_2d, c_2d))

        assert np.allclose(eta_2d,
                           expected_eta_2d), f"2D eta test failed: {eta_2d} != {expected_eta_2d}"
        assert np.allclose(phi_2d,
                           expected_phi_2d), f"2D phi test failed: {phi_2d} != {expected_phi_2d}"

        print("All tests passed!")

    def test_detection(self):
        t = np.array([0, 1, 2, 3])
        eta = np.array([1, 2])
        d_omega = np.array([0.1, 0.2])
        phi = np.array([0, np.pi / 4])
        T2 = np.array([10, 20])

        expected_signal_shape = (4,)

        signal = acq.detection(t, eta, d_omega, phi, T2=T2)

        # Check shape
        assert signal.shape == expected_signal_shape, f"Shape mismatch: expected {expected_signal_shape}, got {signal.shape}"

        # Check values manually or compare with expected values calculated separately
        # Add further checks as needed to validate the computation

        print("All tests passed!")
