"""
   Name: gradient.py
   Purpose:
   Created on: 10/8/2024
   Created by: Heng Sun
   Additional Notes: 
"""

import numpy as np


def generate_linear_gradient_3d_Bz(shape, direction='x', start_value=0, end_value=1):
    Bz = generate_linear_gradient_3d(shape, direction, start_value, end_value)
    Bxy = np.zeros_like(Bz)
    B = np.stack((Bxy, Bxy, Bz), axis=0)
    return B


def generate_linear_gradient_3d(shape, direction='x', start_value=0, end_value=1):
    """
    Generate a 3D matrix with a linear gradient in a specified direction.
    This function is generated by Clarity and tested & edited by the author.

    Parameters:
    shape (tuple): The shape of the 3D matrix (z, y, x).
    direction (str): The direction of the gradient ('x', 'y', or 'z').
    start_value (float): The starting value of the gradient.
    end_value (float): The ending value of the gradient.

    Returns:
    np.ndarray: A 3D matrix with the specified linear gradient.
    """

    z, y, x = shape

    if direction == 'x':
        gradient = np.linspace(start_value, end_value, x)
        matrix = np.tile(gradient, (z, y, 1))
    elif direction == 'y':
        gradient = np.linspace(start_value, end_value, y)
        matrix = np.tile(gradient, (z, x, 1)).transpose(0, 2, 1)
    elif direction == 'z':
        gradient = np.linspace(start_value, end_value, z)
        matrix = np.tile(gradient, (x, y, 1)).transpose(2, 1, 0)
    else:
        raise ValueError("Invalid direction. Choose from 'x', 'y', or 'z'.")

    return matrix
