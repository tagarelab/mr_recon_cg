"""
   Name: test_dephasing.py
   Purpose:
   Created on: 9/17/2024
   Created by: Heng Sun
   Additional Notes: 
"""

# %% Test if we can generate a matrix for the dephasing simulation (generated by Clarity)
# Assuming E1 and E2 are vectors of length len_t, and M is a matrix of shape 3xN

# Example dimensions and initializations
import numpy as np

import numpy as np

# Given dimensions for demonstration purposes
len_t = 4  # length of 't'
N = 5  # number of columns in M

# Initialize M, E1, and E2
M = np.random.rand(3, N)  # M is a 3xN matrix
E1 = np.random.rand(N, len_t)
E2 = np.random.rand(N, len_t)

# Construct the A matrix
A = np.zeros((3, N, len_t))

# Populate the A matrix
A[0, :, :] = E2
A[1, :, :] = E2
A[2, :, :] = E1

# Calculate M_t using the newly initialized A matrix
M_t_simplified = A * M[:, :, np.newaxis]

# Verify that M_t_simplified gives the same result as the original loop
M_t_original = np.zeros((3, N, len_t))
for k in range(N):
    for i in range(len_t):
        M_t_original[0, k, i] = M[0, k] * E2[k, i]
        M_t_original[1, k, i] = M[1, k] * E2[k, i]
        M_t_original[2, k, i] = M[2, k] * E1[k, i]

# Check equivalence
assert np.allclose(M_t_simplified, M_t_original), "The results do not match!"
