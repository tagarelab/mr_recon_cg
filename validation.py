"""
   Name: validation.py
   Purpose: Validation functions for the project
   Created on: 2/13/2024
   Created by: Heng Sun
   Additional Notes: 
"""
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import visualization as vis
from scipy.stats import jarque_bera
from statsmodels.stats.diagnostic import acorr_ljungbox


def auto_corr(signal, max_lag=10):
    """
    Calculate the autocorrelation of the signal
    This function is generated by Github Copilot and edited & tested by the author.
    """
    signal = np.fft.fftshift(np.fft.fft(signal))
    signal = np.abs(signal)
    signal = np.fft.ifft(np.fft.fftshift(signal))
    return signal[:max_lag] / signal[0]


def is_white_noise(signal):
    """
    Check if the signal is white noise. This function is generated by ChatGPT and edited by the author.
    :param signal:
    :param alpha:
    :return:
    """
    # # absolute
    # signal = np.abs(signal)
    #
    # # Autocorrelation
    # autocorr = np.correlate(signal, signal, mode='full')
    # autocorr = autocorr[len(signal) - 1:] / len(signal)
    #
    # # Check autocorrelation at lags > 0
    # if np.any(np.abs(autocorr[1:]) > 2 / np.sqrt(len(signal))):
    #     return False

    # # Power Spectral Density (PSD)
    # f, Pxx = sp.signal.welch(signal, nperseg=len(signal))
    # if np.max(Pxx) / np.min(Pxx) > 10:
    #     return False

    # # Ljung-Box test
    # _, p_value = acorr_ljungbox(signal, lags=[10], return_df=False)
    # print(p_value[0])
    # if p_value[0] < alpha:
    #     return False
    #
    # Auto correlation with fourier transform
    sig_auto_corr = auto_corr(signal, max_lag=10)
    print("Second auto correlation: ", np.abs(sig_auto_corr[1]))
    vis.complex(sig_auto_corr, name="Auto Correlation")

    if np.any(np.abs(sig_auto_corr[1:]) > 2 / np.sqrt(len(signal))):
        print("Lower bound is not satisfied: ", 2 / np.sqrt(len(signal)))
        return False

    return True


def validate_equal(a,b,Name_a = "First Item", Name_b = "Second Item", atol = 1e-8, rtol = 1e-5, equal_nan = False,
                   make_plot = False):
    """
    Validate if two items are equal in absolute value
    This function is drafted by Github Copilot and edited & tested by the author.
    """
    if np.allclose(abs(a), abs(b), atol = atol, rtol = rtol, equal_nan = equal_nan):
        print(f"{Name_a} and {Name_b} are equal in absolute value")
    else:
        print(f"{Name_a} and {Name_b} are not equal in absolute value")

    if make_plot:
        plt.figure()
        plt.plot(abs(a), label = Name_a)
        plt.plot(abs(b), label = Name_b)
        plt.legend()
        plt.show()