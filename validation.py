"""
   Name: validation.py
   Purpose: Validation functions for the project
   Created on: 2/13/2024
   Created by: Heng Sun
   Additional Notes: 
"""
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import visualization as vis
import algebra as algb
from scipy.stats import jarque_bera
from statsmodels.stats.diagnostic import acorr_ljungbox


# def is_median_flat(signal, tol = None, DisplayIntermediate = False):
#     """
#     Check if the signal is flat in the median. This function is generated by Github Copilot and edited by the author.
#     :param signal:
#     :param alpha:
#     :return:
#     """
#     if tol is None:
#         tol = 1e-3
#
#     if np.abs(np.median(signal)) < tol:
#         return True
#
#     return False


def is_white_noise(signal, tol = None, DisplayIntermediate = False):
    """
    Check if the signal is white noise. This function is generated by ChatGPT and edited by the author.
    :param signal:
    :param alpha:
    :return:
    """
    if tol is None:
        tol = 2 / np.sqrt(len(signal))
    
    # Auto correlation with fourier transform
    sig_auto_corr = algb.auto_corr(signal, max_lag=10)

    if DisplayIntermediate:
        print("Second auto correlation: ", np.abs(sig_auto_corr[1]))
        vis.complex(sig_auto_corr, name="Auto Correlation")

    if np.any(np.abs(sig_auto_corr[1:]) > tol):
        return False

    return True


def validate_equal(a,b,Name_a = "First Item", Name_b = "Second Item", atol = 1e-8, rtol = 1e-5, equal_nan = False,
                   make_plot = False):
    """
    Validate if two items are equal in absolute value
    This function is drafted by Github Copilot and edited & tested by the author.
    """
    if np.allclose(abs(a), abs(b), atol = atol, rtol = rtol, equal_nan = equal_nan):
        print(f"{Name_a} and {Name_b} are equal in absolute value")
    else:
        print(f"{Name_a} and {Name_b} are not equal in absolute value")

    if make_plot:
        plt.figure()
        plt.plot(abs(a), label = Name_a)
        plt.plot(abs(b), label = Name_b)
        plt.legend()
        plt.show()